{"ast":null,"code":"var _jsxFileName = \"/Users/HarjotBhullar/Projects/Simply_Code_Examples/react_component_tutorial/src/Components/MyComponent/MyComponent.js\";\nimport React, { Component } from 'react';\nimport './MyComponent.css';\nexport default class MainApp extends Component {\n  // We can export default or by naming the component (mostly done when there is more than one component in one file) \n  constructor(props) {\n    super(props); // constructor is the first method that is called for a react component\n    // so we use this to set any information we need , prior to the rest of the code\n    // such as intialize state , and binding event handler functions to this , so we can use \"this\" in our helper functions.\n\n    this.state = {\n      count: 0\n    };\n    this.incrementCount = this.incrementCount.bind(this);\n  } //In this space we can define any helper functions\n\n\n  incrementCount() {\n    this.setState({\n      count: this.state.count + 1\n    });\n  }\n\n  getButton() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      onClick: this.incrementCount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, \"Plus One\");\n  }\n\n  render() {\n    // render is required, and is basically used to setup any variables \n    //that you might want to return\n    var countDiv = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, \"Count: \", this.state.count);\n    var countButton = this.getButton(); // return basically includes all jsx elements ... for example divs , \n    // span , and you can also add variables or components like such { variable } or <Component />\n    // there needs to be one main div or jsx element that encloses everything that is being returned \n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"MyComponent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, \"Child Component\"), countDiv, countButton);\n  }\n\n}","map":{"version":3,"sources":["/Users/HarjotBhullar/Projects/Simply_Code_Examples/react_component_tutorial/src/Components/MyComponent/MyComponent.js"],"names":["React","Component","MainApp","constructor","props","state","count","incrementCount","bind","setState","getButton","render","countDiv","countButton"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,mBAAP;AAEA,eAAe,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAC3C;AACAE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;AACA;AACA;;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAIA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACH,GAd0C,CAgB3C;;;AACAD,EAAAA,cAAc,GAAG;AACb,SAAKE,QAAL,CAAc;AACVH,MAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AADhB,KAAd;AAGH;;AAEDI,EAAAA,SAAS,GAAG;AACR,wBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,OAAO,EAAE,KAAKH,cAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAGH;;AAEJI,EAAAA,MAAM,GAAG;AACF;AACA;AACA,QAAIC,QAAQ,gBACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAc,KAAKP,KAAL,CAAWC,KAAzB,CADA;AAIA,QAAIO,WAAW,GAAG,KAAKH,SAAL,EAAlB,CAPE,CASF;AACA;AACA;;AACN,wBACC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACa;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADb,EAEcE,QAFd,EAGcC,WAHd,CADD;AAOA;;AAhD6C","sourcesContent":["import React, { Component } from 'react';\nimport './MyComponent.css';\n\nexport default class MainApp extends Component {\n    // We can export default or by naming the component (mostly done when there is more than one component in one file) \n    constructor(props) {\n        super(props);\n\n        // constructor is the first method that is called for a react component\n        // so we use this to set any information we need , prior to the rest of the code\n        // such as intialize state , and binding event handler functions to this , so we can use \"this\" in our helper functions.\n\n        this.state = {\n            count: 0\n        };\n\n        this.incrementCount = this.incrementCount.bind(this);\n    }\n\n    //In this space we can define any helper functions\n    incrementCount() {\n        this.setState({\n            count: this.state.count + 1\n        });\n    }\n\n    getButton() {\n        return (\n            <div className='button' onClick={this.incrementCount}>Plus One</div>\n        );\n    }\n \n\trender() {\n        // render is required, and is basically used to setup any variables \n        //that you might want to return\n        var countDiv = (\n        <div >Count: {this.state.count}</div>\n        );\n\n        var countButton = this.getButton();\n\n        // return basically includes all jsx elements ... for example divs , \n        // span , and you can also add variables or components like such { variable } or <Component />\n        // there needs to be one main div or jsx element that encloses everything that is being returned \n\t\treturn (\n\t\t\t<div className='MyComponent'>\n                <div className='Title'>Child Component</div>\n                {countDiv}\n                {countButton}\n\t\t\t</div>\n\t\t);\n\t}\n} "]},"metadata":{},"sourceType":"module"}